use cbindgen::{self, Language};
use std::{env, path::PathBuf};

fn main() {
    let crate_dir = PathBuf::from(
        env::var("CARGO_MANIFEST_DIR").expect("CARGO_MANIFEST_DIR env var is not defined"),
    );
    println!("{:?}", crate_dir);

    let config = cbindgen::Config {
        include_guard: Some("__hial_h".into()),
        autogen_warning: Some(
            "/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */"
                .into(),
        ),
        language: Language::C,
        includes: vec![],
        sys_includes: vec!["stdint.h".into()],
        no_includes: true,
        ..Default::default()
    };

    cbindgen::generate_with_config(&crate_dir, config)
        .expect("Unable to generate bindings")
        .write_to_file(crate_dir.join("hial.h"));

    for (language, files) in &[
        ("rust", ["parser.c", "scanner.c"].as_ref()),
        ("javascript", ["parser.c", "scanner.c"].as_ref()),
    ] {
        let package = format!("tree-sitter-{}", language);
        let srcdir = format!("{}/src", package);
        let mut build = cc::Build::new();
        build.flag("-Wno-unused-parameter");
        for file in *files {
            let srcfile = format!("{}/{}", srcdir, file);
            println!("cargo:rerun-if-changed={}", srcfile);
            build.file(srcfile);
        }
        build.include(srcdir);
        build.compile(&package);
    }
}
